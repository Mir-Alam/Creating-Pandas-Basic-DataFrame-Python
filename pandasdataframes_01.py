# -*- coding: utf-8 -*-
"""PandasDataFrames_01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IQ3wzmVhsx3wTLx9vtp_C1aGKq2RhT3P

# Intro to Pandas
by Ryan Orsinger

## Introducing DataFrames

### Pandas DataFrames Basics - Part 1
- How to make pandas DataFrames from other Python collections
- Learning about your dataframe's properties and information
- Selecting a single column
- Adding new columns to a DataFrame
- Renaming columns
- Descriptive stats on the columns
"""

import pandas as pd

# Creating a dataframe from a list of dictionaries
basket = [
    {"item": "mango", "quantity": 4, "price": 2.99},
    {"item": "bread", "quantity": 2, "price": 3.25},
    {"item": "juice", "quantity": 1, "price": 5.90},
    {"item": "orange", "quantity": 3, "price": 2.99},
    {"item": "lime", "quantity": 3, "price": 0.3},
]
basket

# With dataframes, our columns are our variables or features
# Each row represents a unique observation (usually)
df = pd.DataFrame(basket)
df

# Creating a dataframe from a dictionary of lists
basket = {
    "item": ["mango", "bread", "juice", "orange", "lime"],
    "quantity": [4, 2, 1, 3, 3],
    "price": [2.99, 3.25, 5.90, 2.99, 0.30]
}
basket

pd.DataFrame(basket)

# Creating a dataframe from a list of lists
example = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

column_names = ["variable_a", "variable_b", "variable_c"]
row_names = ["observation_1", "observation_2", "observation_3"]

pd.DataFrame(example, columns=column_names, index=row_names)

# Creating an empty dataframe
df = pd.DataFrame()

# Adding columns to a dataframe
# Any list-like data type can become a column
df["item"] = pd.Series(["Mango", "Bread", "Juice", "Orange", "Lime"]) #pandas series
df["quantity"] = [2, 2, 1, 3, 3] # list
df["price"] = (2.99, 3.25, 5.90, 2.99, 0.30) # tuple
df

# .shape returns rows, columns
df.shape

# Returns the rows
df.shape[0]

# Returns the number of columns
df.shape[1]

# len returns number of rows
len(df)

# size returns rows * columns
df.size
# 5 * 3 = 15

# Adding new columns to the dataframe
df["subtotal"] = df["quantity"] * df["price"]
df

# set_index can overwrite the default index
df.set_index("item", inplace=True)
df

# Accessing the index values
df.index

# We can also overwrite the index with a Series of equal length
df.index = df.index.str.lower()
df

# Accessing all the columns
df.columns

# Another example of creating a new column
df["tax"] = 0.07
df

# The "total cost" column does not exist, but this bracket syntax creates it.
df["total cost"] = df["subtotal"] + (df["subtotal"] * df["tax"])
df

# Dot syntax also allows for calling an existing column
# Using .column syntax only works if the column exists already, has no spaces, and is not a dataframe method already
df.price

df.subtotal

# .dtypes outputs the datatypes of all columns in the dataframe
df.dtypes

# .info returns datatype and non-null count
df.info()

df.price.describe()
# 25% 1st quarter
# 75% 3rd querter
# 50% median
# std = standart deviation

df.price

# Show descriptive stats for numeric columns
df.describe()

# A column in a dataframe is a series
type(df.quantity)

# .value_counts returns a series
df.quantity.value_counts()

# Aggregate functions can run on all the numeric values in the dataframe
df.mean()

# Obtain the median of all numeric columns
df.median()

# Standard deviation of all the numeric columns
df.std()

# The square bracket syntax can be used to access column names with spaces
# Same with column names that are methods on the dataframe object
# Recommend avoiding column names with spaces, removing spaces when you encounter them
# Recommend avoiding naming columns after dataframe method
df["shape"] = ["round", "loaf", "jug", "round", "round"]
df

# Remember that the .shape attribute shows # rows, #columns
df.shape

# The bracket quote syntax returns the column
df["shape"]

# Naming columns the same as built-in dataframe methods and spaces in column names are not helpful
# .rename allows for renaming columns in a dataframe using a dictionary
df.rename(columns={"shape": "item_shape", "total cost": "total"}, inplace=True)
df

"""## Exercises
- Assign dataframe named `df` out of the following list of dictionaries.
```
items = [
    {"item name": "USB cable", "price": "$10.99", "type": "USB C to USB C"},
    {"item name": "USB cable", "price": "$10.99", "type": "USB A to USB C"},
    {"item name": "Batteries", "price": "$9.99", "type": "AA"},
    {"item name": "Batteries", "price": "$8.99", "type": "AAA"},
    {"item name": "Mouse", "price": "$12.99", "type": "Wireless USB"},
]
```
- Rename the `item name` column to `item_name`
- Add a column named `units_sold` to this dataframe and assign the values `[41, 113, 54, 35, 22]`
- Convert the price column into a float (hint: remove non-numeric characters before attempting to convert the data type to a float)
- Create a new column named `total_revenue` that holds the `price` column times the `units_sold` column
- Round the `total_revenue` column values to the nearest whole number. (hint: search or consult the pandas documentation
"""

import pandas as pd

items = [
  {"item name": "USB cable", "price": "$10.99", "type": "USB C to USB C"},
  {"item name": "USB cable", "price": "$10.99", "type": "USB A to USB C"},
  {"item name": "Batteries", "price": "$9.99", "type": "AA"},
  {"item name": "Batteries", "price": "$8.99", "type": "AAA"},
  {"item name": "Mouse", "price": "$12.99", "type": "Wireless USB"},
]

from typing import ItemsView
# Assign dataframe named `df` out of the following list of dictionaries
df=pd.DataFrame(items)
df

# Rename the item name column to item_name
df.rename(columns={"item name": "item_name"}, inplace=True)
df

# Add a column named units_sold to this dataframe and assign the values [41, 113, 54, 35, 22]
df["units_sold"]=[41, 113, 54, 35, 22]
df

# Convert the price column into a float data type
df["price"]=df["price"].str.replace("$","")
df["price"]=df["price"].astype(float)
df

# Create a new column named "total_revenue" that holds the `price` column times the `units_sold` column
df["total_revenue"]=df["price"]*df["units_sold"]
df

# Round the total_revenue column values to the nearest whole number.
df["total_revenue"]=df["total_revenue"].round()
df

# export file in csv
df.to_csv("items.csv")

# export file in excel
df.to_excel("items.xlsx")